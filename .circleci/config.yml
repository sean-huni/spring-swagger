# Java Gradle CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-java/ for more details
#
version: 2.1
jobs:
  vault:
    docker:
      - image: circleci/openjdk:11-jdk

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_ADDR: $VAULT_ADDR

    steps:
      #        name: Spawn Vault Docker Instance
      - run: docker pull vault && docker run --cap-add=IPC_LOCK -e 'VAULT_ADDR=${VAULT_ADDR}' -e 'VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}' -p 8200:8200 -v /tmp/vault:/vault/logs -d --name dev-vault vault
      #          name: Sleep (Wait for the Vault Instance to become available)
      - run: sleep 3

      #          name: Inject Secrets into the Vault
      - run: docker exec -e 'VAULT_TOKEN=${VAULT_TOKEN}' -e 'VAULT_ADDR=${VAULT_ADDR}' dev-vault sh -c "vault kv put secret/party-identity/dev admin.username=admin-user admin.password=Mut4nt-Squ@ serv.username=service-user serv.password=Imm0Rt4L~P@ss spring.datasource.username=dev-db spring.datasource.password=S3cret\*\*DB"
      - run: docker exec -e 'VAULT_TOKEN=${VAULT_TOKEN}' -e 'VAULT_ADDR=${VAULT_ADDR}' dev-vault sh -c "vault kv put secret/party-identity/live admin.username=admin-live admin.password=Mut4nt-l1ve-Squ@ serv.username=service-live serv.password=Imm0Rt4L~L1v3~P@ss spring.datasource.username=dev-db spring.datasource.password=l1v3_S3cret\*\*DB"
  #    - run:
  #        name: ENV-Variables into the Vault
  #        command: |
  #          export VAULT_TOKEN=${VAULT_TOKEN}
  #          export VAULT_ADDR=${VAULT_ADDR}

  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: sh gradlew clean dependencies --refresh-dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Spin up the docker env
      - run: sh salt start

      # run Build!
      - run: sh gradlew build

  test:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: sh gradlew dependencies --refresh-dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run: sh salt start
      # run tests!
      - run: sh gradlew test --refresh-dependencies

  code_quality:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our context"
          command: |
            echo $SONAR_LOGIN

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run tests!
      - run: sh gradlew --refresh-dependencies dependencies test

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Code Quality Metrics (Sonarqube) >> Code Quality Metrics (Sonarqube)
      - run: sh gradlew sonarqube
      - run: sh salt stop

workflows:
  version: 2
  main:
    jobs:
      - vault:
          context:
            - Spring-Swagger
            - Security
      - build:
          requires: vault
          context:
            - Spring-Swagger
            - Security
          filters:
            branches:
              only:
                - master

      - test:
          requires:
            - vault
            - build
      - code_quality:
          context:
            - Spring-Swagger
            - Security
          requires:
            - vault
            - test