plugins {
    id 'org.springframework.boot' version '2.4.0-RC1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.0"
}

apply plugin: 'jacoco'

group = 'io'
version = '1.0.3'
sourceCompatibility = '11'
def springFoxVer = '3.0.0'
def log4jVer = '2.13.3'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation "io.springfox:springfox-swagger2:$springFoxVer"
    implementation "io.springfox:springfox-boot-starter:$springFoxVer"
    implementation "io.springfox:springfox-swagger-ui:$springFoxVer"
    implementation "io.springfox:springfox-data-rest:$springFoxVer"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVer"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVer"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}


task codeCoverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets io.swagger
        test
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}

codeCoverageReport.dependsOn {
    test
}

test {
    useJUnitPlatform()
    finalizedBy codeCoverageReport
}

project.tasks["sonarqube"].dependsOn "codeCoverageReport"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "Spring-Swagger"
        property "sonar.projectKey", "sean-huni_spring-swagger"
        property "sonar.organization", "sean-huni-github"
        property "sonar.host.url", "https://sonarcloud.io"
//        property "sonar.login", project.property('sonar.login')
        property "sonar.login", $SONAR_LOGIN
    }
}